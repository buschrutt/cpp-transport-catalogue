// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace catalog_proto {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Offset;
struct OffsetDefaultTypeInternal;
extern OffsetDefaultTypeInternal _Offset_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Rgb;
struct RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace catalog_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::catalog_proto::Bus* Arena::CreateMaybeMessage<::catalog_proto::Bus>(Arena*);
template<> ::catalog_proto::Color* Arena::CreateMaybeMessage<::catalog_proto::Color>(Arena*);
template<> ::catalog_proto::Distance* Arena::CreateMaybeMessage<::catalog_proto::Distance>(Arena*);
template<> ::catalog_proto::Offset* Arena::CreateMaybeMessage<::catalog_proto::Offset>(Arena*);
template<> ::catalog_proto::RenderSettings* Arena::CreateMaybeMessage<::catalog_proto::RenderSettings>(Arena*);
template<> ::catalog_proto::Rgb* Arena::CreateMaybeMessage<::catalog_proto::Rgb>(Arena*);
template<> ::catalog_proto::Rgba* Arena::CreateMaybeMessage<::catalog_proto::Rgba>(Arena*);
template<> ::catalog_proto::RoutingSettings* Arena::CreateMaybeMessage<::catalog_proto::RoutingSettings>(Arena*);
template<> ::catalog_proto::Stop* Arena::CreateMaybeMessage<::catalog_proto::Stop>(Arena*);
template<> ::catalog_proto::TransportCatalogue* Arena::CreateMaybeMessage<::catalog_proto::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace catalog_proto {

// ===================================================================

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
    kStopsFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRenderSetFieldNumber = 4,
    kRoutingSetFieldNumber = 5,
  };
  // repeated .catalog_proto.Bus buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::catalog_proto::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Bus >*
      mutable_buses();
  private:
  const ::catalog_proto::Bus& _internal_buses(int index) const;
  ::catalog_proto::Bus* _internal_add_buses();
  public:
  const ::catalog_proto::Bus& buses(int index) const;
  ::catalog_proto::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Bus >&
      buses() const;

  // repeated .catalog_proto.Stop stops = 2;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::catalog_proto::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Stop >*
      mutable_stops();
  private:
  const ::catalog_proto::Stop& _internal_stops(int index) const;
  ::catalog_proto::Stop* _internal_add_stops();
  public:
  const ::catalog_proto::Stop& stops(int index) const;
  ::catalog_proto::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Stop >&
      stops() const;

  // repeated .catalog_proto.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::catalog_proto::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Distance >*
      mutable_distances();
  private:
  const ::catalog_proto::Distance& _internal_distances(int index) const;
  ::catalog_proto::Distance* _internal_add_distances();
  public:
  const ::catalog_proto::Distance& distances(int index) const;
  ::catalog_proto::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Distance >&
      distances() const;

  // .catalog_proto.RenderSettings render_set = 4;
  bool has_render_set() const;
  private:
  bool _internal_has_render_set() const;
  public:
  void clear_render_set();
  const ::catalog_proto::RenderSettings& render_set() const;
  PROTOBUF_NODISCARD ::catalog_proto::RenderSettings* release_render_set();
  ::catalog_proto::RenderSettings* mutable_render_set();
  void set_allocated_render_set(::catalog_proto::RenderSettings* render_set);
  private:
  const ::catalog_proto::RenderSettings& _internal_render_set() const;
  ::catalog_proto::RenderSettings* _internal_mutable_render_set();
  public:
  void unsafe_arena_set_allocated_render_set(
      ::catalog_proto::RenderSettings* render_set);
  ::catalog_proto::RenderSettings* unsafe_arena_release_render_set();

  // .catalog_proto.RoutingSettings routing_set = 5;
  bool has_routing_set() const;
  private:
  bool _internal_has_routing_set() const;
  public:
  void clear_routing_set();
  const ::catalog_proto::RoutingSettings& routing_set() const;
  PROTOBUF_NODISCARD ::catalog_proto::RoutingSettings* release_routing_set();
  ::catalog_proto::RoutingSettings* mutable_routing_set();
  void set_allocated_routing_set(::catalog_proto::RoutingSettings* routing_set);
  private:
  const ::catalog_proto::RoutingSettings& _internal_routing_set() const;
  ::catalog_proto::RoutingSettings* _internal_mutable_routing_set();
  public:
  void unsafe_arena_set_allocated_routing_set(
      ::catalog_proto::RoutingSettings* routing_set);
  ::catalog_proto::RoutingSettings* unsafe_arena_release_routing_set();

  // @@protoc_insertion_point(class_scope:catalog_proto.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Bus > buses_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Distance > distances_;
    ::catalog_proto::RenderSettings* render_set_;
    ::catalog_proto::RoutingSettings* routing_set_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdsFieldNumber = 3,
    kNameFieldNumber = 1,
    kIsRoundtripFieldNumber = 2,
  };
  // repeated int32 stop_ids = 3;
  int stop_ids_size() const;
  private:
  int _internal_stop_ids_size() const;
  public:
  void clear_stop_ids();
  private:
  int32_t _internal_stop_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_stop_ids() const;
  void _internal_add_stop_ids(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_stop_ids();
  public:
  int32_t stop_ids(int index) const;
  void set_stop_ids(int index, int32_t value);
  void add_stop_ids(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      stop_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_stop_ids();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 2;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > stop_ids_;
    mutable std::atomic<int> _stop_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double latitude = 3;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 4;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double latitude_;
    double longitude_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  ~Distance() override;
  explicit PROTOBUF_CONSTEXPR Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Distance& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Distance& from) {
    Distance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopFromIdFieldNumber = 1,
    kStopToIdFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // int32 stop_from_id = 1;
  void clear_stop_from_id();
  int32_t stop_from_id() const;
  void set_stop_from_id(int32_t value);
  private:
  int32_t _internal_stop_from_id() const;
  void _internal_set_stop_from_id(int32_t value);
  public:

  // int32 stop_to_id = 2;
  void clear_stop_to_id();
  int32_t stop_to_id() const;
  void set_stop_to_id(int32_t value);
  private:
  int32_t _internal_stop_to_id() const;
  void _internal_set_stop_to_id(int32_t value);
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t stop_from_id_;
    int32_t stop_to_id_;
    double distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 2,
    kBusWaitTimeFieldNumber = 1,
  };
  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // int32 bus_wait_time = 1;
  void clear_bus_wait_time();
  int32_t bus_wait_time() const;
  void set_bus_wait_time(int32_t value);
  private:
  int32_t _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_velocity_;
    int32_t bus_wait_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  ~RenderSettings() override;
  explicit PROTOBUF_CONSTEXPR RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenderSettings& from) {
    RenderSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 9,
    kStopLabelOffsetFieldNumber = 10,
    kUnderlayerColorFieldNumber = 11,
    kWeightFieldNumber = 1,
    kHeightFieldNumber = 2,
    kBusLabelFontSizeFieldNumber = 3,
    kStopLabelFontSizeFieldNumber = 4,
    kPaddingFieldNumber = 5,
    kStopRadiusFieldNumber = 6,
    kLineWidthFieldNumber = 7,
    kUnderlayerWidthFieldNumber = 8,
  };
  // repeated .catalog_proto.Color color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::catalog_proto::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Color >*
      mutable_color_palette();
  private:
  const ::catalog_proto::Color& _internal_color_palette(int index) const;
  ::catalog_proto::Color* _internal_add_color_palette();
  public:
  const ::catalog_proto::Color& color_palette(int index) const;
  ::catalog_proto::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Color >&
      color_palette() const;

  // .catalog_proto.Offset bus_label_offset = 9;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::catalog_proto::Offset& bus_label_offset() const;
  PROTOBUF_NODISCARD ::catalog_proto::Offset* release_bus_label_offset();
  ::catalog_proto::Offset* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::catalog_proto::Offset* bus_label_offset);
  private:
  const ::catalog_proto::Offset& _internal_bus_label_offset() const;
  ::catalog_proto::Offset* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::catalog_proto::Offset* bus_label_offset);
  ::catalog_proto::Offset* unsafe_arena_release_bus_label_offset();

  // .catalog_proto.Offset stop_label_offset = 10;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::catalog_proto::Offset& stop_label_offset() const;
  PROTOBUF_NODISCARD ::catalog_proto::Offset* release_stop_label_offset();
  ::catalog_proto::Offset* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::catalog_proto::Offset* stop_label_offset);
  private:
  const ::catalog_proto::Offset& _internal_stop_label_offset() const;
  ::catalog_proto::Offset* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::catalog_proto::Offset* stop_label_offset);
  ::catalog_proto::Offset* unsafe_arena_release_stop_label_offset();

  // .catalog_proto.Color underlayer_color = 11;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::catalog_proto::Color& underlayer_color() const;
  PROTOBUF_NODISCARD ::catalog_proto::Color* release_underlayer_color();
  ::catalog_proto::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::catalog_proto::Color* underlayer_color);
  private:
  const ::catalog_proto::Color& _internal_underlayer_color() const;
  ::catalog_proto::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::catalog_proto::Color* underlayer_color);
  ::catalog_proto::Color* unsafe_arena_release_underlayer_color();

  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // int32 bus_label_font_size = 3;
  void clear_bus_label_font_size();
  int32_t bus_label_font_size() const;
  void set_bus_label_font_size(int32_t value);
  private:
  int32_t _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(int32_t value);
  public:

  // int32 stop_label_font_size = 4;
  void clear_stop_label_font_size();
  int32_t stop_label_font_size() const;
  void set_stop_label_font_size(int32_t value);
  private:
  int32_t _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(int32_t value);
  public:

  // double padding = 5;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double stop_radius = 6;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // double line_width = 7;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double underlayer_width = 8;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Color > color_palette_;
    ::catalog_proto::Offset* bus_label_offset_;
    ::catalog_proto::Offset* stop_label_offset_;
    ::catalog_proto::Color* underlayer_color_;
    double weight_;
    double height_;
    int32_t bus_label_font_size_;
    int32_t stop_label_font_size_;
    double padding_;
    double stop_radius_;
    double line_width_;
    double underlayer_width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Offset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Offset) */ {
 public:
  inline Offset() : Offset(nullptr) {}
  ~Offset() override;
  explicit PROTOBUF_CONSTEXPR Offset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Offset(const Offset& from);
  Offset(Offset&& from) noexcept
    : Offset() {
    *this = ::std::move(from);
  }

  inline Offset& operator=(const Offset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Offset& operator=(Offset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Offset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Offset* internal_default_instance() {
    return reinterpret_cast<const Offset*>(
               &_Offset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Offset& a, Offset& b) {
    a.Swap(&b);
  }
  inline void Swap(Offset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Offset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Offset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Offset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Offset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Offset& from) {
    Offset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Offset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Offset";
  }
  protected:
  explicit Offset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Offset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  enum VariantCase {
    kStr = 1,
    kRgb = 2,
    kRgba = 3,
    VARIANT_NOT_SET = 0,
  };

  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
    kRgbFieldNumber = 2,
    kRgbaFieldNumber = 3,
  };
  // string str = 1;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // .catalog_proto.Rgb rgb = 2;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::catalog_proto::Rgb& rgb() const;
  PROTOBUF_NODISCARD ::catalog_proto::Rgb* release_rgb();
  ::catalog_proto::Rgb* mutable_rgb();
  void set_allocated_rgb(::catalog_proto::Rgb* rgb);
  private:
  const ::catalog_proto::Rgb& _internal_rgb() const;
  ::catalog_proto::Rgb* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::catalog_proto::Rgb* rgb);
  ::catalog_proto::Rgb* unsafe_arena_release_rgb();

  // .catalog_proto.Rgba rgba = 3;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::catalog_proto::Rgba& rgba() const;
  PROTOBUF_NODISCARD ::catalog_proto::Rgba* release_rgba();
  ::catalog_proto::Rgba* mutable_rgba();
  void set_allocated_rgba(::catalog_proto::Rgba* rgba);
  private:
  const ::catalog_proto::Rgba& _internal_rgba() const;
  ::catalog_proto::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::catalog_proto::Rgba* rgba);
  ::catalog_proto::Rgba* unsafe_arena_release_rgba();

  void clear_variant();
  VariantCase variant_case() const;
  // @@protoc_insertion_point(class_scope:catalog_proto.Color)
 private:
  class _Internal;
  void set_has_str();
  void set_has_rgb();
  void set_has_rgba();

  inline bool has_variant() const;
  inline void clear_has_variant();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union VariantUnion {
      constexpr VariantUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
      ::catalog_proto::Rgb* rgb_;
      ::catalog_proto::Rgba* rgba_;
    } variant_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Rgb) */ {
 public:
  inline Rgb() : Rgb(nullptr) {}
  ~Rgb() override;
  explicit PROTOBUF_CONSTEXPR Rgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgb(const Rgb& from);
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgb& operator=(Rgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgb& from) {
    Rgb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Rgb";
  }
  protected:
  explicit Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Rgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgba final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:catalog_proto.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  ~Rgba() override;
  explicit PROTOBUF_CONSTEXPR Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgba& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgba& from) {
    Rgba::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "catalog_proto.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:catalog_proto.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    double opacity_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransportCatalogue

// repeated .catalog_proto.Bus buses = 1;
inline int TransportCatalogue::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::catalog_proto::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:catalog_proto.TransportCatalogue.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:catalog_proto.TransportCatalogue.buses)
  return &_impl_.buses_;
}
inline const ::catalog_proto::Bus& TransportCatalogue::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::catalog_proto::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:catalog_proto.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::catalog_proto::Bus* TransportCatalogue::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::catalog_proto::Bus* TransportCatalogue::add_buses() {
  ::catalog_proto::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:catalog_proto.TransportCatalogue.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:catalog_proto.TransportCatalogue.buses)
  return _impl_.buses_;
}

// repeated .catalog_proto.Stop stops = 2;
inline int TransportCatalogue::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::catalog_proto::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:catalog_proto.TransportCatalogue.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:catalog_proto.TransportCatalogue.stops)
  return &_impl_.stops_;
}
inline const ::catalog_proto::Stop& TransportCatalogue::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::catalog_proto::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:catalog_proto.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::catalog_proto::Stop* TransportCatalogue::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::catalog_proto::Stop* TransportCatalogue::add_stops() {
  ::catalog_proto::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:catalog_proto.TransportCatalogue.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:catalog_proto.TransportCatalogue.stops)
  return _impl_.stops_;
}

// repeated .catalog_proto.Distance distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return _impl_.distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  _impl_.distances_.Clear();
}
inline ::catalog_proto::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:catalog_proto.TransportCatalogue.distances)
  return _impl_.distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:catalog_proto.TransportCatalogue.distances)
  return &_impl_.distances_;
}
inline const ::catalog_proto::Distance& TransportCatalogue::_internal_distances(int index) const {
  return _impl_.distances_.Get(index);
}
inline const ::catalog_proto::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:catalog_proto.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::catalog_proto::Distance* TransportCatalogue::_internal_add_distances() {
  return _impl_.distances_.Add();
}
inline ::catalog_proto::Distance* TransportCatalogue::add_distances() {
  ::catalog_proto::Distance* _add = _internal_add_distances();
  // @@protoc_insertion_point(field_add:catalog_proto.TransportCatalogue.distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:catalog_proto.TransportCatalogue.distances)
  return _impl_.distances_;
}

// .catalog_proto.RenderSettings render_set = 4;
inline bool TransportCatalogue::_internal_has_render_set() const {
  return this != internal_default_instance() && _impl_.render_set_ != nullptr;
}
inline bool TransportCatalogue::has_render_set() const {
  return _internal_has_render_set();
}
inline void TransportCatalogue::clear_render_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.render_set_ != nullptr) {
    delete _impl_.render_set_;
  }
  _impl_.render_set_ = nullptr;
}
inline const ::catalog_proto::RenderSettings& TransportCatalogue::_internal_render_set() const {
  const ::catalog_proto::RenderSettings* p = _impl_.render_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalog_proto::RenderSettings&>(
      ::catalog_proto::_RenderSettings_default_instance_);
}
inline const ::catalog_proto::RenderSettings& TransportCatalogue::render_set() const {
  // @@protoc_insertion_point(field_get:catalog_proto.TransportCatalogue.render_set)
  return _internal_render_set();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_set(
    ::catalog_proto::RenderSettings* render_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.render_set_);
  }
  _impl_.render_set_ = render_set;
  if (render_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.TransportCatalogue.render_set)
}
inline ::catalog_proto::RenderSettings* TransportCatalogue::release_render_set() {
  
  ::catalog_proto::RenderSettings* temp = _impl_.render_set_;
  _impl_.render_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalog_proto::RenderSettings* TransportCatalogue::unsafe_arena_release_render_set() {
  // @@protoc_insertion_point(field_release:catalog_proto.TransportCatalogue.render_set)
  
  ::catalog_proto::RenderSettings* temp = _impl_.render_set_;
  _impl_.render_set_ = nullptr;
  return temp;
}
inline ::catalog_proto::RenderSettings* TransportCatalogue::_internal_mutable_render_set() {
  
  if (_impl_.render_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalog_proto::RenderSettings>(GetArenaForAllocation());
    _impl_.render_set_ = p;
  }
  return _impl_.render_set_;
}
inline ::catalog_proto::RenderSettings* TransportCatalogue::mutable_render_set() {
  ::catalog_proto::RenderSettings* _msg = _internal_mutable_render_set();
  // @@protoc_insertion_point(field_mutable:catalog_proto.TransportCatalogue.render_set)
  return _msg;
}
inline void TransportCatalogue::set_allocated_render_set(::catalog_proto::RenderSettings* render_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.render_set_;
  }
  if (render_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(render_set);
    if (message_arena != submessage_arena) {
      render_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.render_set_ = render_set;
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.TransportCatalogue.render_set)
}

// .catalog_proto.RoutingSettings routing_set = 5;
inline bool TransportCatalogue::_internal_has_routing_set() const {
  return this != internal_default_instance() && _impl_.routing_set_ != nullptr;
}
inline bool TransportCatalogue::has_routing_set() const {
  return _internal_has_routing_set();
}
inline void TransportCatalogue::clear_routing_set() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_set_ != nullptr) {
    delete _impl_.routing_set_;
  }
  _impl_.routing_set_ = nullptr;
}
inline const ::catalog_proto::RoutingSettings& TransportCatalogue::_internal_routing_set() const {
  const ::catalog_proto::RoutingSettings* p = _impl_.routing_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalog_proto::RoutingSettings&>(
      ::catalog_proto::_RoutingSettings_default_instance_);
}
inline const ::catalog_proto::RoutingSettings& TransportCatalogue::routing_set() const {
  // @@protoc_insertion_point(field_get:catalog_proto.TransportCatalogue.routing_set)
  return _internal_routing_set();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_routing_set(
    ::catalog_proto::RoutingSettings* routing_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_set_);
  }
  _impl_.routing_set_ = routing_set;
  if (routing_set) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.TransportCatalogue.routing_set)
}
inline ::catalog_proto::RoutingSettings* TransportCatalogue::release_routing_set() {
  
  ::catalog_proto::RoutingSettings* temp = _impl_.routing_set_;
  _impl_.routing_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalog_proto::RoutingSettings* TransportCatalogue::unsafe_arena_release_routing_set() {
  // @@protoc_insertion_point(field_release:catalog_proto.TransportCatalogue.routing_set)
  
  ::catalog_proto::RoutingSettings* temp = _impl_.routing_set_;
  _impl_.routing_set_ = nullptr;
  return temp;
}
inline ::catalog_proto::RoutingSettings* TransportCatalogue::_internal_mutable_routing_set() {
  
  if (_impl_.routing_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalog_proto::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_set_ = p;
  }
  return _impl_.routing_set_;
}
inline ::catalog_proto::RoutingSettings* TransportCatalogue::mutable_routing_set() {
  ::catalog_proto::RoutingSettings* _msg = _internal_mutable_routing_set();
  // @@protoc_insertion_point(field_mutable:catalog_proto.TransportCatalogue.routing_set)
  return _msg;
}
inline void TransportCatalogue::set_allocated_routing_set(::catalog_proto::RoutingSettings* routing_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_set_;
  }
  if (routing_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_set);
    if (message_arena != submessage_arena) {
      routing_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_set, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_set_ = routing_set;
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.TransportCatalogue.routing_set)
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:catalog_proto.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:catalog_proto.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:catalog_proto.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.Bus.name)
}

// bool is_roundtrip = 2;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Bus.is_roundtrip)
}

// repeated int32 stop_ids = 3;
inline int Bus::_internal_stop_ids_size() const {
  return _impl_.stop_ids_.size();
}
inline int Bus::stop_ids_size() const {
  return _internal_stop_ids_size();
}
inline void Bus::clear_stop_ids() {
  _impl_.stop_ids_.Clear();
}
inline int32_t Bus::_internal_stop_ids(int index) const {
  return _impl_.stop_ids_.Get(index);
}
inline int32_t Bus::stop_ids(int index) const {
  // @@protoc_insertion_point(field_get:catalog_proto.Bus.stop_ids)
  return _internal_stop_ids(index);
}
inline void Bus::set_stop_ids(int index, int32_t value) {
  _impl_.stop_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:catalog_proto.Bus.stop_ids)
}
inline void Bus::_internal_add_stop_ids(int32_t value) {
  _impl_.stop_ids_.Add(value);
}
inline void Bus::add_stop_ids(int32_t value) {
  _internal_add_stop_ids(value);
  // @@protoc_insertion_point(field_add:catalog_proto.Bus.stop_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::_internal_stop_ids() const {
  return _impl_.stop_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Bus::stop_ids() const {
  // @@protoc_insertion_point(field_list:catalog_proto.Bus.stop_ids)
  return _internal_stop_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::_internal_mutable_stop_ids() {
  return &_impl_.stop_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Bus::mutable_stop_ids() {
  // @@protoc_insertion_point(field_mutable_list:catalog_proto.Bus.stop_ids)
  return _internal_mutable_stop_ids();
}

// -------------------------------------------------------------------

// Stop

// int32 id = 1;
inline void Stop::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Stop::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Stop::id() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Stop.id)
  return _internal_id();
}
inline void Stop::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Stop::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Stop.id)
}

// string name = 2;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:catalog_proto.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:catalog_proto.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:catalog_proto.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.Stop.name)
}

// double latitude = 3;
inline void Stop::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Stop::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Stop::latitude() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Stop.latitude)
  return _internal_latitude();
}
inline void Stop::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Stop::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Stop.latitude)
}

// double longitude = 4;
inline void Stop::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Stop::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Stop::longitude() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Stop.longitude)
  return _internal_longitude();
}
inline void Stop::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Stop::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Stop.longitude)
}

// -------------------------------------------------------------------

// Distance

// int32 stop_from_id = 1;
inline void Distance::clear_stop_from_id() {
  _impl_.stop_from_id_ = 0;
}
inline int32_t Distance::_internal_stop_from_id() const {
  return _impl_.stop_from_id_;
}
inline int32_t Distance::stop_from_id() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Distance.stop_from_id)
  return _internal_stop_from_id();
}
inline void Distance::_internal_set_stop_from_id(int32_t value) {
  
  _impl_.stop_from_id_ = value;
}
inline void Distance::set_stop_from_id(int32_t value) {
  _internal_set_stop_from_id(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Distance.stop_from_id)
}

// int32 stop_to_id = 2;
inline void Distance::clear_stop_to_id() {
  _impl_.stop_to_id_ = 0;
}
inline int32_t Distance::_internal_stop_to_id() const {
  return _impl_.stop_to_id_;
}
inline int32_t Distance::stop_to_id() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Distance.stop_to_id)
  return _internal_stop_to_id();
}
inline void Distance::_internal_set_stop_to_id(int32_t value) {
  
  _impl_.stop_to_id_ = value;
}
inline void Distance::set_stop_to_id(int32_t value) {
  _internal_set_stop_to_id(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Distance.stop_to_id)
}

// double distance = 3;
inline void Distance::clear_distance() {
  _impl_.distance_ = 0;
}
inline double Distance::_internal_distance() const {
  return _impl_.distance_;
}
inline double Distance::distance() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(double value) {
  
  _impl_.distance_ = value;
}
inline void Distance::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Distance.distance)
}

// -------------------------------------------------------------------

// RoutingSettings

// int32 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline int32_t RoutingSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline int32_t RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(int32_t value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(int32_t value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// RenderSettings

// double weight = 1;
inline void RenderSettings::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RenderSettings::_internal_weight() const {
  return _impl_.weight_;
}
inline double RenderSettings::weight() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.weight)
  return _internal_weight();
}
inline void RenderSettings::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RenderSettings::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.weight)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  _impl_.height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return _impl_.height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.height)
}

// int32 bus_label_font_size = 3;
inline void RenderSettings::clear_bus_label_font_size() {
  _impl_.bus_label_font_size_ = 0;
}
inline int32_t RenderSettings::_internal_bus_label_font_size() const {
  return _impl_.bus_label_font_size_;
}
inline int32_t RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(int32_t value) {
  
  _impl_.bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(int32_t value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.bus_label_font_size)
}

// int32 stop_label_font_size = 4;
inline void RenderSettings::clear_stop_label_font_size() {
  _impl_.stop_label_font_size_ = 0;
}
inline int32_t RenderSettings::_internal_stop_label_font_size() const {
  return _impl_.stop_label_font_size_;
}
inline int32_t RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(int32_t value) {
  
  _impl_.stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(int32_t value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.stop_label_font_size)
}

// double padding = 5;
inline void RenderSettings::clear_padding() {
  _impl_.padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return _impl_.padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.padding)
}

// double stop_radius = 6;
inline void RenderSettings::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.stop_radius)
}

// double line_width = 7;
inline void RenderSettings::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.line_width)
}

// double underlayer_width = 8;
inline void RenderSettings::clear_underlayer_width() {
  _impl_.underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return _impl_.underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  _impl_.underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:catalog_proto.RenderSettings.underlayer_width)
}

// .catalog_proto.Offset bus_label_offset = 9;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && _impl_.bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
}
inline const ::catalog_proto::Offset& RenderSettings::_internal_bus_label_offset() const {
  const ::catalog_proto::Offset* p = _impl_.bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalog_proto::Offset&>(
      ::catalog_proto::_Offset_default_instance_);
}
inline const ::catalog_proto::Offset& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::catalog_proto::Offset* bus_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bus_label_offset_);
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.RenderSettings.bus_label_offset)
}
inline ::catalog_proto::Offset* RenderSettings::release_bus_label_offset() {
  
  ::catalog_proto::Offset* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalog_proto::Offset* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:catalog_proto.RenderSettings.bus_label_offset)
  
  ::catalog_proto::Offset* temp = _impl_.bus_label_offset_;
  _impl_.bus_label_offset_ = nullptr;
  return temp;
}
inline ::catalog_proto::Offset* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (_impl_.bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalog_proto::Offset>(GetArenaForAllocation());
    _impl_.bus_label_offset_ = p;
  }
  return _impl_.bus_label_offset_;
}
inline ::catalog_proto::Offset* RenderSettings::mutable_bus_label_offset() {
  ::catalog_proto::Offset* _msg = _internal_mutable_bus_label_offset();
  // @@protoc_insertion_point(field_mutable:catalog_proto.RenderSettings.bus_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_bus_label_offset(::catalog_proto::Offset* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.RenderSettings.bus_label_offset)
}

// .catalog_proto.Offset stop_label_offset = 10;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && _impl_.stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
}
inline const ::catalog_proto::Offset& RenderSettings::_internal_stop_label_offset() const {
  const ::catalog_proto::Offset* p = _impl_.stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalog_proto::Offset&>(
      ::catalog_proto::_Offset_default_instance_);
}
inline const ::catalog_proto::Offset& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::catalog_proto::Offset* stop_label_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_label_offset_);
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.RenderSettings.stop_label_offset)
}
inline ::catalog_proto::Offset* RenderSettings::release_stop_label_offset() {
  
  ::catalog_proto::Offset* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalog_proto::Offset* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:catalog_proto.RenderSettings.stop_label_offset)
  
  ::catalog_proto::Offset* temp = _impl_.stop_label_offset_;
  _impl_.stop_label_offset_ = nullptr;
  return temp;
}
inline ::catalog_proto::Offset* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (_impl_.stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalog_proto::Offset>(GetArenaForAllocation());
    _impl_.stop_label_offset_ = p;
  }
  return _impl_.stop_label_offset_;
}
inline ::catalog_proto::Offset* RenderSettings::mutable_stop_label_offset() {
  ::catalog_proto::Offset* _msg = _internal_mutable_stop_label_offset();
  // @@protoc_insertion_point(field_mutable:catalog_proto.RenderSettings.stop_label_offset)
  return _msg;
}
inline void RenderSettings::set_allocated_stop_label_offset(::catalog_proto::Offset* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.RenderSettings.stop_label_offset)
}

// .catalog_proto.Color underlayer_color = 11;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && _impl_.underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
inline const ::catalog_proto::Color& RenderSettings::_internal_underlayer_color() const {
  const ::catalog_proto::Color* p = _impl_.underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::catalog_proto::Color&>(
      ::catalog_proto::_Color_default_instance_);
}
inline const ::catalog_proto::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::catalog_proto::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlayer_color_);
  }
  _impl_.underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.RenderSettings.underlayer_color)
}
inline ::catalog_proto::Color* RenderSettings::release_underlayer_color() {
  
  ::catalog_proto::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::catalog_proto::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:catalog_proto.RenderSettings.underlayer_color)
  
  ::catalog_proto::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
  return temp;
}
inline ::catalog_proto::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (_impl_.underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::catalog_proto::Color>(GetArenaForAllocation());
    _impl_.underlayer_color_ = p;
  }
  return _impl_.underlayer_color_;
}
inline ::catalog_proto::Color* RenderSettings::mutable_underlayer_color() {
  ::catalog_proto::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:catalog_proto.RenderSettings.underlayer_color)
  return _msg;
}
inline void RenderSettings::set_allocated_underlayer_color(::catalog_proto::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.RenderSettings.underlayer_color)
}

// repeated .catalog_proto.Color color_palette = 12;
inline int RenderSettings::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int RenderSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void RenderSettings::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
inline ::catalog_proto::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:catalog_proto.RenderSettings.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:catalog_proto.RenderSettings.color_palette)
  return &_impl_.color_palette_;
}
inline const ::catalog_proto::Color& RenderSettings::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::catalog_proto::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:catalog_proto.RenderSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::catalog_proto::Color* RenderSettings::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::catalog_proto::Color* RenderSettings::add_color_palette() {
  ::catalog_proto::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:catalog_proto.RenderSettings.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::catalog_proto::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:catalog_proto.RenderSettings.color_palette)
  return _impl_.color_palette_;
}

// -------------------------------------------------------------------

// Offset

// double x = 1;
inline void Offset::clear_x() {
  _impl_.x_ = 0;
}
inline double Offset::_internal_x() const {
  return _impl_.x_;
}
inline double Offset::x() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Offset.x)
  return _internal_x();
}
inline void Offset::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Offset::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Offset.x)
}

// double y = 2;
inline void Offset::clear_y() {
  _impl_.y_ = 0;
}
inline double Offset::_internal_y() const {
  return _impl_.y_;
}
inline double Offset::y() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Offset.y)
  return _internal_y();
}
inline void Offset::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Offset::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Offset.y)
}

// -------------------------------------------------------------------

// Color

// string str = 1;
inline bool Color::_internal_has_str() const {
  return variant_case() == kStr;
}
inline bool Color::has_str() const {
  return _internal_has_str();
}
inline void Color::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void Color::clear_str() {
  if (_internal_has_str()) {
    _impl_.variant_.str_.Destroy();
    clear_has_variant();
  }
}
inline const std::string& Color::str() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Color.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void Color::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    _impl_.variant_.str_.InitDefault();
  }
  _impl_.variant_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:catalog_proto.Color.str)
}
inline std::string* Color::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:catalog_proto.Color.str)
  return _s;
}
inline const std::string& Color::_internal_str() const {
  if (_internal_has_str()) {
    return _impl_.variant_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Color::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    _impl_.variant_.str_.InitDefault();
  }
  _impl_.variant_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_variant();
    set_has_str();
    _impl_.variant_.str_.InitDefault();
  }
  return _impl_.variant_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* Color::release_str() {
  // @@protoc_insertion_point(field_release:catalog_proto.Color.str)
  if (_internal_has_str()) {
    clear_has_variant();
    return _impl_.variant_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void Color::set_allocated_str(std::string* str) {
  if (has_variant()) {
    clear_variant();
  }
  if (str != nullptr) {
    set_has_str();
    _impl_.variant_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:catalog_proto.Color.str)
}

// .catalog_proto.Rgb rgb = 2;
inline bool Color::_internal_has_rgb() const {
  return variant_case() == kRgb;
}
inline bool Color::has_rgb() const {
  return _internal_has_rgb();
}
inline void Color::set_has_rgb() {
  _impl_._oneof_case_[0] = kRgb;
}
inline void Color::clear_rgb() {
  if (_internal_has_rgb()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.rgb_;
    }
    clear_has_variant();
  }
}
inline ::catalog_proto::Rgb* Color::release_rgb() {
  // @@protoc_insertion_point(field_release:catalog_proto.Color.rgb)
  if (_internal_has_rgb()) {
    clear_has_variant();
    ::catalog_proto::Rgb* temp = _impl_.variant_.rgb_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::catalog_proto::Rgb& Color::_internal_rgb() const {
  return _internal_has_rgb()
      ? *_impl_.variant_.rgb_
      : reinterpret_cast< ::catalog_proto::Rgb&>(::catalog_proto::_Rgb_default_instance_);
}
inline const ::catalog_proto::Rgb& Color::rgb() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Color.rgb)
  return _internal_rgb();
}
inline ::catalog_proto::Rgb* Color::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_unsafe_arena_release:catalog_proto.Color.rgb)
  if (_internal_has_rgb()) {
    clear_has_variant();
    ::catalog_proto::Rgb* temp = _impl_.variant_.rgb_;
    _impl_.variant_.rgb_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_rgb(::catalog_proto::Rgb* rgb) {
  clear_variant();
  if (rgb) {
    set_has_rgb();
    _impl_.variant_.rgb_ = rgb;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.Color.rgb)
}
inline ::catalog_proto::Rgb* Color::_internal_mutable_rgb() {
  if (!_internal_has_rgb()) {
    clear_variant();
    set_has_rgb();
    _impl_.variant_.rgb_ = CreateMaybeMessage< ::catalog_proto::Rgb >(GetArenaForAllocation());
  }
  return _impl_.variant_.rgb_;
}
inline ::catalog_proto::Rgb* Color::mutable_rgb() {
  ::catalog_proto::Rgb* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:catalog_proto.Color.rgb)
  return _msg;
}

// .catalog_proto.Rgba rgba = 3;
inline bool Color::_internal_has_rgba() const {
  return variant_case() == kRgba;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::set_has_rgba() {
  _impl_._oneof_case_[0] = kRgba;
}
inline void Color::clear_rgba() {
  if (_internal_has_rgba()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.variant_.rgba_;
    }
    clear_has_variant();
  }
}
inline ::catalog_proto::Rgba* Color::release_rgba() {
  // @@protoc_insertion_point(field_release:catalog_proto.Color.rgba)
  if (_internal_has_rgba()) {
    clear_has_variant();
    ::catalog_proto::Rgba* temp = _impl_.variant_.rgba_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.variant_.rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::catalog_proto::Rgba& Color::_internal_rgba() const {
  return _internal_has_rgba()
      ? *_impl_.variant_.rgba_
      : reinterpret_cast< ::catalog_proto::Rgba&>(::catalog_proto::_Rgba_default_instance_);
}
inline const ::catalog_proto::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Color.rgba)
  return _internal_rgba();
}
inline ::catalog_proto::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_unsafe_arena_release:catalog_proto.Color.rgba)
  if (_internal_has_rgba()) {
    clear_has_variant();
    ::catalog_proto::Rgba* temp = _impl_.variant_.rgba_;
    _impl_.variant_.rgba_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Color::unsafe_arena_set_allocated_rgba(::catalog_proto::Rgba* rgba) {
  clear_variant();
  if (rgba) {
    set_has_rgba();
    _impl_.variant_.rgba_ = rgba;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:catalog_proto.Color.rgba)
}
inline ::catalog_proto::Rgba* Color::_internal_mutable_rgba() {
  if (!_internal_has_rgba()) {
    clear_variant();
    set_has_rgba();
    _impl_.variant_.rgba_ = CreateMaybeMessage< ::catalog_proto::Rgba >(GetArenaForAllocation());
  }
  return _impl_.variant_.rgba_;
}
inline ::catalog_proto::Rgba* Color::mutable_rgba() {
  ::catalog_proto::Rgba* _msg = _internal_mutable_rgba();
  // @@protoc_insertion_point(field_mutable:catalog_proto.Color.rgba)
  return _msg;
}

inline bool Color::has_variant() const {
  return variant_case() != VARIANT_NOT_SET;
}
inline void Color::clear_has_variant() {
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}
inline Color::VariantCase Color::variant_case() const {
  return Color::VariantCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Rgb

// uint32 red = 1;
inline void Rgb::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgb::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgb::red() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgb.red)
  return _internal_red();
}
inline void Rgb::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgb::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgb.red)
}

// uint32 green = 2;
inline void Rgb::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgb::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgb::green() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgb.green)
  return _internal_green();
}
inline void Rgb::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgb::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgb.green)
}

// uint32 blue = 3;
inline void Rgb::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgb::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgb::blue() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgb.blue)
  return _internal_blue();
}
inline void Rgb::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgb::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgb.blue)
}

// -------------------------------------------------------------------

// Rgba

// uint32 red = 1;
inline void Rgba::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgba::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgba::red() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgba.red)
  return _internal_red();
}
inline void Rgba::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgba::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgba.red)
}

// uint32 green = 2;
inline void Rgba::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgba::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgba::green() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgba.green)
  return _internal_green();
}
inline void Rgba::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgba::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgba.green)
}

// uint32 blue = 3;
inline void Rgba::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgba::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgba::blue() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgba.blue)
  return _internal_blue();
}
inline void Rgba::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgba::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgba.blue)
}

// double opacity = 4;
inline void Rgba::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return _impl_.opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:catalog_proto.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  _impl_.opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:catalog_proto.Rgba.opacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace catalog_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

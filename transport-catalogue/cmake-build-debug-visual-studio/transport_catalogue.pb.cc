// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto_serialization {
PROTOBUF_CONSTEXPR TransportCatalogue::TransportCatalogue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buses_)*/{}
  , /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.distances_)*/{}
  , /*decltype(_impl_.render_set_)*/nullptr
  , /*decltype(_impl_.routing_set_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportCatalogueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportCatalogueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
PROTOBUF_CONSTEXPR Bus::Bus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_ids_)*/{}
  , /*decltype(_impl_._stop_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_roundtrip_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusDefaultTypeInternal _Bus_default_instance_;
PROTOBUF_CONSTEXPR Stop::Stop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDefaultTypeInternal _Stop_default_instance_;
PROTOBUF_CONSTEXPR Distance::Distance(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_from_id_)*/0
  , /*decltype(_impl_.stop_to_id_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistanceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistanceDefaultTypeInternal() {}
  union {
    Distance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistanceDefaultTypeInternal _Distance_default_instance_;
PROTOBUF_CONSTEXPR RoutingSettings::RoutingSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_.bus_wait_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
PROTOBUF_CONSTEXPR RenderSettings::RenderSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_palette_)*/{}
  , /*decltype(_impl_.bus_label_offset_)*/nullptr
  , /*decltype(_impl_.stop_label_offset_)*/nullptr
  , /*decltype(_impl_.underlayer_color_)*/nullptr
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.bus_label_font_size_)*/0
  , /*decltype(_impl_.stop_label_font_size_)*/0
  , /*decltype(_impl_.padding_)*/0
  , /*decltype(_impl_.stop_radius_)*/0
  , /*decltype(_impl_.line_width_)*/0
  , /*decltype(_impl_.underlayer_width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RenderSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderSettingsDefaultTypeInternal() {}
  union {
    RenderSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
PROTOBUF_CONSTEXPR Offset::Offset(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OffsetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OffsetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OffsetDefaultTypeInternal() {}
  union {
    Offset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OffsetDefaultTypeInternal _Offset_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variant_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR Rgb::Rgb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RgbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RgbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RgbDefaultTypeInternal() {}
  union {
    Rgb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RgbDefaultTypeInternal _Rgb_default_instance_;
PROTOBUF_CONSTEXPR Rgba::Rgba(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RgbaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RgbaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RgbaDefaultTypeInternal() {}
  union {
    Rgba _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RgbaDefaultTypeInternal _Rgba_default_instance_;
}  // namespace proto_serialization
static ::_pb::Metadata file_level_metadata_transport_5fcatalogue_2eproto[10];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _impl_.buses_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _impl_.distances_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _impl_.render_set_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::TransportCatalogue, _impl_.routing_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Bus, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Bus, _impl_.is_roundtrip_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Bus, _impl_.stop_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Stop, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Stop, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Stop, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Stop, _impl_.longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Distance, _impl_.stop_from_id_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Distance, _impl_.stop_to_id_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Distance, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RoutingSettings, _impl_.bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RoutingSettings, _impl_.bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.stop_radius_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.line_width_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::RenderSettings, _impl_.color_palette_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Offset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Offset, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Offset, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Color, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Color, _impl_.variant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgb, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgb, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgb, _impl_.blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgba, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgba, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgba, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgba, _impl_.blue_),
  PROTOBUF_FIELD_OFFSET(::proto_serialization::Rgba, _impl_.opacity_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto_serialization::TransportCatalogue)},
  { 11, -1, -1, sizeof(::proto_serialization::Bus)},
  { 20, -1, -1, sizeof(::proto_serialization::Stop)},
  { 30, -1, -1, sizeof(::proto_serialization::Distance)},
  { 39, -1, -1, sizeof(::proto_serialization::RoutingSettings)},
  { 47, -1, -1, sizeof(::proto_serialization::RenderSettings)},
  { 65, -1, -1, sizeof(::proto_serialization::Offset)},
  { 73, -1, -1, sizeof(::proto_serialization::Color)},
  { 83, -1, -1, sizeof(::proto_serialization::Rgb)},
  { 92, -1, -1, sizeof(::proto_serialization::Rgba)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto_serialization::_TransportCatalogue_default_instance_._instance,
  &::proto_serialization::_Bus_default_instance_._instance,
  &::proto_serialization::_Stop_default_instance_._instance,
  &::proto_serialization::_Distance_default_instance_._instance,
  &::proto_serialization::_RoutingSettings_default_instance_._instance,
  &::proto_serialization::_RenderSettings_default_instance_._instance,
  &::proto_serialization::_Offset_default_instance_._instance,
  &::proto_serialization::_Color_default_instance_._instance,
  &::proto_serialization::_Rgb_default_instance_._instance,
  &::proto_serialization::_Rgba_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\023proto_seria"
  "lization\"\215\002\n\022TransportCatalogue\022\'\n\005buses"
  "\030\001 \003(\0132\030.proto_serialization.Bus\022(\n\005stop"
  "s\030\002 \003(\0132\031.proto_serialization.Stop\0220\n\tdi"
  "stances\030\003 \003(\0132\035.proto_serialization.Dist"
  "ance\0227\n\nrender_set\030\004 \001(\0132#.proto_seriali"
  "zation.RenderSettings\0229\n\013routing_set\030\005 \001"
  "(\0132$.proto_serialization.RoutingSettings"
  "\";\n\003Bus\022\014\n\004name\030\001 \001(\t\022\024\n\014is_roundtrip\030\002 "
  "\001(\010\022\020\n\010stop_ids\030\003 \003(\005\"E\n\004Stop\022\n\n\002id\030\001 \001("
  "\005\022\014\n\004name\030\002 \001(\t\022\020\n\010latitude\030\003 \001(\001\022\021\n\tlon"
  "gitude\030\004 \001(\001\"F\n\010Distance\022\024\n\014stop_from_id"
  "\030\001 \001(\005\022\022\n\nstop_to_id\030\002 \001(\005\022\020\n\010distance\030\003"
  " \001(\001\">\n\017RoutingSettings\022\025\n\rbus_wait_time"
  "\030\001 \001(\005\022\024\n\014bus_velocity\030\002 \001(\001\"\227\003\n\016RenderS"
  "ettings\022\016\n\006weight\030\001 \001(\001\022\016\n\006height\030\002 \001(\001\022"
  "\033\n\023bus_label_font_size\030\003 \001(\005\022\034\n\024stop_lab"
  "el_font_size\030\004 \001(\005\022\017\n\007padding\030\005 \001(\001\022\023\n\013s"
  "top_radius\030\006 \001(\001\022\022\n\nline_width\030\007 \001(\001\022\030\n\020"
  "underlayer_width\030\010 \001(\001\0225\n\020bus_label_offs"
  "et\030\t \001(\0132\033.proto_serialization.Offset\0226\n"
  "\021stop_label_offset\030\n \001(\0132\033.proto_seriali"
  "zation.Offset\0224\n\020underlayer_color\030\013 \001(\0132"
  "\032.proto_serialization.Color\0221\n\rcolor_pal"
  "ette\030\014 \003(\0132\032.proto_serialization.Color\"\036"
  "\n\006Offset\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"u\n\005Color\022"
  "\r\n\003str\030\001 \001(\tH\000\022\'\n\003rgb\030\002 \001(\0132\030.proto_seri"
  "alization.RgbH\000\022)\n\004rgba\030\003 \001(\0132\031.proto_se"
  "rialization.RgbaH\000B\t\n\007variant\"/\n\003Rgb\022\013\n\003"
  "red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001(\r\"A"
  "\n\004Rgba\022\013\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001(\r\022\014\n\004bl"
  "ue\030\003 \001(\r\022\017\n\007opacity\030\004 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
    false, false, 1273, descriptor_table_protodef_transport_5fcatalogue_2eproto,
    "transport_catalogue.proto",
    &descriptor_table_transport_5fcatalogue_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
    file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto,
    file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace proto_serialization {

// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::proto_serialization::RenderSettings& render_set(const TransportCatalogue* msg);
  static const ::proto_serialization::RoutingSettings& routing_set(const TransportCatalogue* msg);
};

const ::proto_serialization::RenderSettings&
TransportCatalogue::_Internal::render_set(const TransportCatalogue* msg) {
  return *msg->_impl_.render_set_;
}
const ::proto_serialization::RoutingSettings&
TransportCatalogue::_Internal::routing_set(const TransportCatalogue* msg) {
  return *msg->_impl_.routing_set_;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportCatalogue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){from._impl_.buses_}
    , decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.distances_){from._impl_.distances_}
    , decltype(_impl_.render_set_){nullptr}
    , decltype(_impl_.routing_set_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_render_set()) {
    _this->_impl_.render_set_ = new ::proto_serialization::RenderSettings(*from._impl_.render_set_);
  }
  if (from._internal_has_routing_set()) {
    _this->_impl_.routing_set_ = new ::proto_serialization::RoutingSettings(*from._impl_.routing_set_);
  }
  // @@protoc_insertion_point(copy_constructor:proto_serialization.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){arena}
    , decltype(_impl_.stops_){arena}
    , decltype(_impl_.distances_){arena}
    , decltype(_impl_.render_set_){nullptr}
    , decltype(_impl_.routing_set_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:proto_serialization.TransportCatalogue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buses_.~RepeatedPtrField();
  _impl_.stops_.~RepeatedPtrField();
  _impl_.distances_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.render_set_;
  if (this != internal_default_instance()) delete _impl_.routing_set_;
}

void TransportCatalogue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buses_.Clear();
  _impl_.stops_.Clear();
  _impl_.distances_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.render_set_ != nullptr) {
    delete _impl_.render_set_;
  }
  _impl_.render_set_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.routing_set_ != nullptr) {
    delete _impl_.routing_set_;
  }
  _impl_.routing_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto_serialization.Bus buses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_serialization.Stop stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_serialization.Distance distances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.RenderSettings render_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.RoutingSettings routing_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportCatalogue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto_serialization.Bus buses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buses_size()); i < n; i++) {
    const auto& repfield = this->_internal_buses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_serialization.Stop stops = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .proto_serialization.Distance distances = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_distances_size()); i < n; i++) {
    const auto& repfield = this->_internal_distances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .proto_serialization.RenderSettings render_set = 4;
  if (this->_internal_has_render_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::render_set(this),
        _Internal::render_set(this).GetCachedSize(), target, stream);
  }

  // .proto_serialization.RoutingSettings routing_set = 5;
  if (this->_internal_has_routing_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::routing_set(this),
        _Internal::routing_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.TransportCatalogue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_serialization.Bus buses = 1;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->_impl_.buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_serialization.Stop stops = 2;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .proto_serialization.Distance distances = 3;
  total_size += 1UL * this->_internal_distances_size();
  for (const auto& msg : this->_impl_.distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_serialization.RenderSettings render_set = 4;
  if (this->_internal_has_render_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.render_set_);
  }

  // .proto_serialization.RoutingSettings routing_set = 5;
  if (this->_internal_has_routing_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }


void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportCatalogue*>(&to_msg);
  auto& from = static_cast<const TransportCatalogue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buses_.MergeFrom(from._impl_.buses_);
  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  _this->_impl_.distances_.MergeFrom(from._impl_.distances_);
  if (from._internal_has_render_set()) {
    _this->_internal_mutable_render_set()->::proto_serialization::RenderSettings::MergeFrom(
        from._internal_render_set());
  }
  if (from._internal_has_routing_set()) {
    _this->_internal_mutable_routing_set()->::proto_serialization::RoutingSettings::MergeFrom(
        from._internal_routing_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buses_.InternalSwap(&other->_impl_.buses_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  _impl_.distances_.InternalSwap(&other->_impl_.distances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.routing_set_)
      + sizeof(TransportCatalogue::_impl_.routing_set_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.render_set_)>(
          reinterpret_cast<char*>(&_impl_.render_set_),
          reinterpret_cast<char*>(&other->_impl_.render_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class Bus::_Internal {
 public:
};

Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_ids_){from._impl_.stop_ids_}
    , /*decltype(_impl_._stop_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_roundtrip_ = from._impl_.is_roundtrip_;
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Bus)
}

inline void Bus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_ids_){arena}
    , /*decltype(_impl_._stop_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:proto_serialization.Bus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_ids_.~RepeatedField();
  _impl_.name_.Destroy();
}

void Bus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Bus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_ids_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.is_roundtrip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_serialization.Bus.name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_roundtrip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_roundtrip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 stop_ids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stop_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_stop_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Bus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_serialization.Bus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_roundtrip = 2;
  if (this->_internal_is_roundtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_roundtrip(), target);
  }

  // repeated int32 stop_ids = 3;
  {
    int byte_size = _impl_._stop_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_stop_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Bus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 stop_ids = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.stop_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._stop_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_roundtrip = 2;
  if (this->_internal_is_roundtrip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bus::GetClassData() const { return &_class_data_; }


void Bus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bus*>(&to_msg);
  auto& from = static_cast<const Bus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Bus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_ids_.MergeFrom(from._impl_.stop_ids_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_roundtrip() != 0) {
    _this->_internal_set_is_roundtrip(from._internal_is_roundtrip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_ids_.InternalSwap(&other->_impl_.stop_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.is_roundtrip_, other->_impl_.is_roundtrip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

class Stop::_Internal {
 public:
};

Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Stop)
}

inline void Stop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:proto_serialization.Stop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void Stop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Stop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_serialization.Stop.name"));
        } else
          goto handle_unusual;
        continue;
      // double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Stop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_serialization.Stop.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double latitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Stop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double latitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stop::GetClassData() const { return &_class_data_; }


void Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stop*>(&to_msg);
  auto& from = static_cast<const Stop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Stop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stop, _impl_.id_)
      + sizeof(Stop::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(Stop, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class Distance::_Internal {
 public:
};

Distance::Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Distance)
}
Distance::Distance(const Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Distance* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_from_id_){}
    , decltype(_impl_.stop_to_id_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.stop_from_id_, &from._impl_.stop_from_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.stop_from_id_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Distance)
}

inline void Distance::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_from_id_){0}
    , decltype(_impl_.stop_to_id_){0}
    , decltype(_impl_.distance_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:proto_serialization.Distance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Distance::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Distance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.stop_from_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_) -
      reinterpret_cast<char*>(&_impl_.stop_from_id_)) + sizeof(_impl_.distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 stop_from_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_to_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stop_to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Distance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Distance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 stop_from_id = 1;
  if (this->_internal_stop_from_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_stop_from_id(), target);
  }

  // int32 stop_to_id = 2;
  if (this->_internal_stop_to_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_stop_to_id(), target);
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Distance)
  return target;
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Distance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 stop_from_id = 1;
  if (this->_internal_stop_from_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_from_id());
  }

  // int32 stop_to_id = 2;
  if (this->_internal_stop_to_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_to_id());
  }

  // double distance = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = this->_internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Distance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Distance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Distance::GetClassData() const { return &_class_data_; }


void Distance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Distance*>(&to_msg);
  auto& from = static_cast<const Distance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Distance)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_stop_from_id() != 0) {
    _this->_internal_set_stop_from_id(from._internal_stop_from_id());
  }
  if (from._internal_stop_to_id() != 0) {
    _this->_internal_set_stop_to_id(from._internal_stop_to_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_distance = from._internal_distance();
  uint64_t raw_distance;
  memcpy(&raw_distance, &tmp_distance, sizeof(tmp_distance));
  if (raw_distance != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Distance, _impl_.distance_)
      + sizeof(Distance::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(Distance, _impl_.stop_from_id_)>(
          reinterpret_cast<char*>(&_impl_.stop_from_id_),
          reinterpret_cast<char*>(&other->_impl_.stop_from_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Distance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){}
    , decltype(_impl_.bus_wait_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_velocity_, &from._impl_.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
    reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.RoutingSettings)
}

inline void RoutingSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){0}
    , decltype(_impl_.bus_wait_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:proto_serialization.RoutingSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.RoutingSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
      reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.RoutingSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_wait_time = 1;
  if (this->_internal_bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.RoutingSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  // int32 bus_wait_time = 1;
  if (this->_internal_bus_wait_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_wait_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSettings::GetClassData() const { return &_class_data_; }


void RoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSettings*>(&to_msg);
  auto& from = static_cast<const RoutingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  if (from._internal_bus_wait_time() != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_wait_time_)
      + sizeof(RoutingSettings::_impl_.bus_wait_time_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_velocity_)>(
          reinterpret_cast<char*>(&_impl_.bus_velocity_),
          reinterpret_cast<char*>(&other->_impl_.bus_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class RenderSettings::_Internal {
 public:
  static const ::proto_serialization::Offset& bus_label_offset(const RenderSettings* msg);
  static const ::proto_serialization::Offset& stop_label_offset(const RenderSettings* msg);
  static const ::proto_serialization::Color& underlayer_color(const RenderSettings* msg);
};

const ::proto_serialization::Offset&
RenderSettings::_Internal::bus_label_offset(const RenderSettings* msg) {
  return *msg->_impl_.bus_label_offset_;
}
const ::proto_serialization::Offset&
RenderSettings::_Internal::stop_label_offset(const RenderSettings* msg) {
  return *msg->_impl_.stop_label_offset_;
}
const ::proto_serialization::Color&
RenderSettings::_Internal::underlayer_color(const RenderSettings* msg) {
  return *msg->_impl_.underlayer_color_;
}
RenderSettings::RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RenderSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_palette_){from._impl_.color_palette_}
    , decltype(_impl_.bus_label_offset_){nullptr}
    , decltype(_impl_.stop_label_offset_){nullptr}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.bus_label_font_size_){}
    , decltype(_impl_.stop_label_font_size_){}
    , decltype(_impl_.padding_){}
    , decltype(_impl_.stop_radius_){}
    , decltype(_impl_.line_width_){}
    , decltype(_impl_.underlayer_width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bus_label_offset()) {
    _this->_impl_.bus_label_offset_ = new ::proto_serialization::Offset(*from._impl_.bus_label_offset_);
  }
  if (from._internal_has_stop_label_offset()) {
    _this->_impl_.stop_label_offset_ = new ::proto_serialization::Offset(*from._impl_.stop_label_offset_);
  }
  if (from._internal_has_underlayer_color()) {
    _this->_impl_.underlayer_color_ = new ::proto_serialization::Color(*from._impl_.underlayer_color_);
  }
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.underlayer_width_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.underlayer_width_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.RenderSettings)
}

inline void RenderSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_palette_){arena}
    , decltype(_impl_.bus_label_offset_){nullptr}
    , decltype(_impl_.stop_label_offset_){nullptr}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.bus_label_font_size_){0}
    , decltype(_impl_.stop_label_font_size_){0}
    , decltype(_impl_.padding_){0}
    , decltype(_impl_.stop_radius_){0}
    , decltype(_impl_.line_width_){0}
    , decltype(_impl_.underlayer_width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:proto_serialization.RenderSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_palette_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.bus_label_offset_;
  if (this != internal_default_instance()) delete _impl_.stop_label_offset_;
  if (this != internal_default_instance()) delete _impl_.underlayer_color_;
}

void RenderSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.RenderSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_palette_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.bus_label_offset_ != nullptr) {
    delete _impl_.bus_label_offset_;
  }
  _impl_.bus_label_offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stop_label_offset_ != nullptr) {
    delete _impl_.stop_label_offset_;
  }
  _impl_.stop_label_offset_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.underlayer_width_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.underlayer_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 bus_label_font_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_label_font_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double padding = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double stop_radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double line_width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double underlayer_width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.Offset bus_label_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_label_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.Offset stop_label_offset = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_label_offset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.Color underlayer_color = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .proto_serialization.Color color_palette = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.RenderSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // double height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  // int32 bus_label_font_size = 3;
  if (this->_internal_bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bus_label_font_size(), target);
  }

  // int32 stop_label_font_size = 4;
  if (this->_internal_stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stop_label_font_size(), target);
  }

  // double padding = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_padding(), target);
  }

  // double stop_radius = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_stop_radius(), target);
  }

  // double line_width = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_line_width(), target);
  }

  // double underlayer_width = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_underlayer_width(), target);
  }

  // .proto_serialization.Offset bus_label_offset = 9;
  if (this->_internal_has_bus_label_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::bus_label_offset(this),
        _Internal::bus_label_offset(this).GetCachedSize(), target, stream);
  }

  // .proto_serialization.Offset stop_label_offset = 10;
  if (this->_internal_has_stop_label_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::stop_label_offset(this),
        _Internal::stop_label_offset(this).GetCachedSize(), target, stream);
  }

  // .proto_serialization.Color underlayer_color = 11;
  if (this->_internal_has_underlayer_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::underlayer_color(this),
        _Internal::underlayer_color(this).GetCachedSize(), target, stream);
  }

  // repeated .proto_serialization.Color color_palette = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_color_palette_size()); i < n; i++) {
    const auto& repfield = this->_internal_color_palette(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.RenderSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto_serialization.Color color_palette = 12;
  total_size += 1UL * this->_internal_color_palette_size();
  for (const auto& msg : this->_impl_.color_palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .proto_serialization.Offset bus_label_offset = 9;
  if (this->_internal_has_bus_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bus_label_offset_);
  }

  // .proto_serialization.Offset stop_label_offset = 10;
  if (this->_internal_has_stop_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stop_label_offset_);
  }

  // .proto_serialization.Color underlayer_color = 11;
  if (this->_internal_has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlayer_color_);
  }

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // double height = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // int32 bus_label_font_size = 3;
  if (this->_internal_bus_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_label_font_size());
  }

  // int32 stop_label_font_size = 4;
  if (this->_internal_stop_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_label_font_size());
  }

  // double padding = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    total_size += 1 + 8;
  }

  // double stop_radius = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    total_size += 1 + 8;
  }

  // double line_width = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    total_size += 1 + 8;
  }

  // double underlayer_width = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RenderSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderSettings::GetClassData() const { return &_class_data_; }


void RenderSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RenderSettings*>(&to_msg);
  auto& from = static_cast<const RenderSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.RenderSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.color_palette_.MergeFrom(from._impl_.color_palette_);
  if (from._internal_has_bus_label_offset()) {
    _this->_internal_mutable_bus_label_offset()->::proto_serialization::Offset::MergeFrom(
        from._internal_bus_label_offset());
  }
  if (from._internal_has_stop_label_offset()) {
    _this->_internal_mutable_stop_label_offset()->::proto_serialization::Offset::MergeFrom(
        from._internal_stop_label_offset());
  }
  if (from._internal_has_underlayer_color()) {
    _this->_internal_mutable_underlayer_color()->::proto_serialization::Color::MergeFrom(
        from._internal_underlayer_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_bus_label_font_size() != 0) {
    _this->_internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from._internal_stop_label_font_size() != 0) {
    _this->_internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = from._internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    _this->_internal_set_padding(from._internal_padding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = from._internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    _this->_internal_set_stop_radius(from._internal_stop_radius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = from._internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    _this->_internal_set_line_width(from._internal_line_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = from._internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    _this->_internal_set_underlayer_width(from._internal_underlayer_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.color_palette_.InternalSwap(&other->_impl_.color_palette_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderSettings, _impl_.underlayer_width_)
      + sizeof(RenderSettings::_impl_.underlayer_width_)
      - PROTOBUF_FIELD_OFFSET(RenderSettings, _impl_.bus_label_offset_)>(
          reinterpret_cast<char*>(&_impl_.bus_label_offset_),
          reinterpret_cast<char*>(&other->_impl_.bus_label_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// ===================================================================

class Offset::_Internal {
 public:
};

Offset::Offset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Offset)
}
Offset::Offset(const Offset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Offset* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Offset)
}

inline void Offset::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Offset::~Offset() {
  // @@protoc_insertion_point(destructor:proto_serialization.Offset)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Offset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Offset::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Offset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Offset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Offset::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Offset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Offset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Offset)
  return target;
}

size_t Offset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Offset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Offset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Offset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Offset::GetClassData() const { return &_class_data_; }


void Offset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Offset*>(&to_msg);
  auto& from = static_cast<const Offset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Offset)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Offset::CopyFrom(const Offset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Offset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Offset::IsInitialized() const {
  return true;
}

void Offset::InternalSwap(Offset* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Offset, _impl_.y_)
      + sizeof(Offset::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Offset, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Offset::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[6]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::proto_serialization::Rgb& rgb(const Color* msg);
  static const ::proto_serialization::Rgba& rgba(const Color* msg);
};

const ::proto_serialization::Rgb&
Color::_Internal::rgb(const Color* msg) {
  return *msg->_impl_.variant_.rgb_;
}
const ::proto_serialization::Rgba&
Color::_Internal::rgba(const Color* msg) {
  return *msg->_impl_.variant_.rgba_;
}
void Color::set_allocated_rgb(::proto_serialization::Rgb* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    set_has_rgb();
    _impl_.variant_.rgb_ = rgb;
  }
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Color.rgb)
}
void Color::set_allocated_rgba(::proto_serialization::Rgba* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_variant();
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    set_has_rgba();
    _impl_.variant_.rgba_ = rgba;
  }
  // @@protoc_insertion_point(field_set_allocated:proto_serialization.Color.rgba)
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_variant();
  switch (from.variant_case()) {
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kRgb: {
      _this->_internal_mutable_rgb()->::proto_serialization::Rgb::MergeFrom(
          from._internal_rgb());
      break;
    }
    case kRgba: {
      _this->_internal_mutable_rgba()->::proto_serialization::Rgba::MergeFrom(
          from._internal_rgba());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variant_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_variant();
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:proto_serialization.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_variant()) {
    clear_variant();
  }
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::clear_variant() {
// @@protoc_insertion_point(one_of_clear_start:proto_serialization.Color)
  switch (variant_case()) {
    case kStr: {
      _impl_.variant_.str_.Destroy();
      break;
    }
    case kRgb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.rgb_;
      }
      break;
    }
    case kRgba: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.variant_.rgba_;
      }
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VARIANT_NOT_SET;
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_variant();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "proto_serialization.Color.str"));
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.Rgb rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto_serialization.Rgba rgba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgba(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 1;
  if (_internal_has_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "proto_serialization.Color.str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_str(), target);
  }

  // .proto_serialization.Rgb rgb = 2;
  if (_internal_has_rgb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rgb(this),
        _Internal::rgb(this).GetCachedSize(), target, stream);
  }

  // .proto_serialization.Rgba rgba = 3;
  if (_internal_has_rgba()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rgba(this),
        _Internal::rgba(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (variant_case()) {
    // string str = 1;
    case kStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str());
      break;
    }
    // .proto_serialization.Rgb rgb = 2;
    case kRgb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.rgb_);
      break;
    }
    // .proto_serialization.Rgba rgba = 3;
    case kRgba: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_.rgba_);
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.variant_case()) {
    case kStr: {
      _this->_internal_set_str(from._internal_str());
      break;
    }
    case kRgb: {
      _this->_internal_mutable_rgb()->::proto_serialization::Rgb::MergeFrom(
          from._internal_rgb());
      break;
    }
    case kRgba: {
      _this->_internal_mutable_rgba()->::proto_serialization::Rgba::MergeFrom(
          from._internal_rgba());
      break;
    }
    case VARIANT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.variant_, other->_impl_.variant_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[7]);
}

// ===================================================================

class Rgb::_Internal {
 public:
};

Rgb::Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Rgb)
}
Rgb::Rgb(const Rgb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rgb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Rgb)
}

inline void Rgb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rgb::~Rgb() {
  // @@protoc_insertion_point(destructor:proto_serialization.Rgb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rgb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rgb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rgb::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Rgb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rgb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Rgb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Rgb)
  return target;
}

size_t Rgb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Rgb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rgb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rgb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rgb::GetClassData() const { return &_class_data_; }


void Rgb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rgb*>(&to_msg);
  auto& from = static_cast<const Rgb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Rgb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rgb::CopyFrom(const Rgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Rgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgb::IsInitialized() const {
  return true;
}

void Rgb::InternalSwap(Rgb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgb, _impl_.blue_)
      + sizeof(Rgb::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Rgb, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[8]);
}

// ===================================================================

class Rgba::_Internal {
 public:
};

Rgba::Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto_serialization.Rgba)
}
Rgba::Rgba(const Rgba& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rgba* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:proto_serialization.Rgba)
}

inline void Rgba::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rgba::~Rgba() {
  // @@protoc_insertion_point(destructor:proto_serialization.Rgba)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rgba::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rgba::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rgba::Clear() {
// @@protoc_insertion_point(message_clear_start:proto_serialization.Rgba)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgba::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rgba::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto_serialization.Rgba)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto_serialization.Rgba)
  return target;
}

size_t Rgba::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto_serialization.Rgba)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 8;
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rgba::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rgba::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rgba::GetClassData() const { return &_class_data_; }


void Rgba::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rgba*>(&to_msg);
  auto& from = static_cast<const Rgba&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto_serialization.Rgba)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = from._internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rgba::CopyFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto_serialization.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgba::IsInitialized() const {
  return true;
}

void Rgba::InternalSwap(Rgba* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgba, _impl_.blue_)
      + sizeof(Rgba::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Rgba, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgba::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto_serialization
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto_serialization::TransportCatalogue*
Arena::CreateMaybeMessage< ::proto_serialization::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::TransportCatalogue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Bus*
Arena::CreateMaybeMessage< ::proto_serialization::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Stop*
Arena::CreateMaybeMessage< ::proto_serialization::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Distance*
Arena::CreateMaybeMessage< ::proto_serialization::Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::RoutingSettings*
Arena::CreateMaybeMessage< ::proto_serialization::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::RenderSettings*
Arena::CreateMaybeMessage< ::proto_serialization::RenderSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Offset*
Arena::CreateMaybeMessage< ::proto_serialization::Offset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Offset >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Color*
Arena::CreateMaybeMessage< ::proto_serialization::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Rgb*
Arena::CreateMaybeMessage< ::proto_serialization::Rgb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Rgb >(arena);
}
template<> PROTOBUF_NOINLINE ::proto_serialization::Rgba*
Arena::CreateMaybeMessage< ::proto_serialization::Rgba >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto_serialization::Rgba >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
